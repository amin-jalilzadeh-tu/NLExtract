# Example of process-chains for extracting BRK source data from zipped GML archives to PostGIS.
# A Chain is a series of Components: one Input, zero or more Filters and one Output.
# The output of a Component is connected to the input of the next Component (except for
# the final Output Component, which writes to the final destination, e.g. Postgres.
#
# Currently 2 chains are executed in the following order:
# 1 - SQL pre:  DB initialization, delete tables, create schema
# 2 - Main ETL chain, consists of the following components
# a. input_zip_file: read input ZIP files and output records with names of files found in ZIP
# b. extract_zip_file: extract one file from a zip into a temp dir
# c. output_ogr2ogr: output using ogr2ogr, input is the GML file (step 2), output can be any OGR output
#
# Any substitutable values are specified in curly brackets e.g. {password}.
# Actual values can be passed as args to Stetl main.py or as arguments from a wrapper program.

[etl]
chains = input_sql_pre|schema_name_filter|output_postgres,
         input_zip_file|extract_zip_file|handle_orl|handle_pand|prepare_gfs|output_ogr2ogr,
         input_sql_post|schema_name_filter|output_postgres

# Alternative chains for testing
#chains = input_zip_file|extract_zip_file|output_std

# Pre SQL file inputs to be executed
[input_sql_pre]
class = stetl.inputs.fileinput.StringFileInput
file_path = sql/drop-tables.sql,sql/create-schema.sql

# Post SQL file inputs to be executed
[input_sql_post]
class = stetl.inputs.fileinput.StringFileInput
file_path = sql/delete-duplicates.sql,sql/finalize-tables.sql

# Generic filter to substitute Python-format string values like {schema} in string
[schema_name_filter]
class = stetl.filters.stringfilter.StringSubstitutionFilter
# format args {schema} is schema name
format_args = schema:{schema}

[output_postgres]
class = stetl.outputs.dboutput.PostgresDbOutput
database = {database}
host = {host}
port = {port}
user = {user}
password = {password}
schema = {schema}

# The source input ZIP-file(s) from dir, producing 'records' with ZIP file name and inner file names
[input_zip_file]
class = stetl.inputs.fileinput.ZipFileInput
file_path = {input_dir}
filename_pattern = {zip_files_pattern}
name_filter = {filename_match}

# Filter to extract a ZIP file one by one to a temporary location
[extract_zip_file]
class = stetl.filters.zipfileextractor.ZipFileExtractor
file_path = {temp_dir}/fromzip-tmp.gml

# The ogr2ogr command-line, may use any output here, as long as
# the input is a GML file.
# TODO: find a way to use a GML-stream through stdin to ogr2ogr
[output_ogr2ogr]
class = stetl.outputs.execoutput.Ogr2OgrExecOutput
# destination format: OGR vector format name
dest_format = PostgreSQL
# destination datasource: name of datasource
dest_data_source = "PG:dbname=DATALES_20240512 host=localhost port=5432 user=postgres password=865990289 active_schema=public"
# layer creation options will only be added to ogr2ogr on first run
lco = -lco LAUNDER=YES -lco PRECISION=NO -lco FID64=FALSE
# spatial_extent, translates to -spat xmin ymin xmax ymax
spatial_extent = {spatial_extent}
# miscellaneous ogr2ogr options
options = -append -gt 65536 {multi_opts} --config PG_USE_COPY NO --config CPL_ZIP_ENCODING CP437
# remove input files?
cleanup_input = True
# gfs template - since 27.03.2024 provided via GfsPreparationFilter
# gfs_template = {gfs_template}

# Filter to copy openbareruimtelabel features with only one position per feature
[handle_orl]
class = stetlbgt.subfeaturehandler.SubFeatureHandler
temp_file = {temp_dir}/orl-tmp.gml
parent_tag_ns = http://www.geostandaarden.nl/imgeo/2.1
parent_tag_name = OpenbareRuimteLabel
namespace_mapping = imgeo:http://www.geostandaarden.nl/imgeo/2.1
child_feature_xpath = imgeo:positie
keep_parent_feature = False
# child_feature_alt_tag_name =
# parent_feature_geom_name =

# Filter to copy pand features with only the main geometry, or only one nummeraanduiding per feature
[handle_pand]
class = stetlbgt.subfeaturehandler.SubFeatureHandler
temp_file = {temp_dir}/pand-tmp.gml
parent_tag_ns = http://www.opengis.net/citygml/building/2.0
parent_tag_name = BuildingPart
namespace_mapping = imgeo:http://www.geostandaarden.nl/imgeo/2.1
child_feature_xpath = imgeo:nummeraanduidingreeks[imgeo:Nummeraanduidingreeks]
keep_parent_feature = True
child_feature_alt_tag_name = BuildingPart_nummeraanduiding
parent_feature_geom_name = imgeo:geometrie2dGrondvlak

# Prepare the generic GFS file to optimize the loading speed
[prepare_gfs]
class = stetlcomponents.gfspreparationfilter.GfsPreparationFilter
input_gfs = {gfs_template}

# Below alternative outputs are meant for testing
# The ogr2ogr command-line, may use any output here, as long as
# the input is a GML file.
# TODO: find a way to use a GML-stream through stdin to ogr2ogr

# Output to GeoPackage File, will contain all Layers
[output_ogr2ogr_gpkg]
class = stetl.outputs.execoutput.Ogr2OgrExecOutput
# destination format: OGR vector format name
dest_format = GPKG
# destination datasource: path to .gpkg output file
dest_data_source = "{temp_dir}/output.gpkg"
# layer creation options will only be added to ogr2ogr on first run
lco = -lco SPATIAL_INDEX=YES -lco PRECISION=NO
# spatial_extent, translates to -spat xmin ymin xmax ymax
spatial_extent = {spatial_extent}
# gfs template
# gfs_template = {gfs_template}
# miscellaneous ogr2ogr options
options = -append -gt 65536 {multi_opts} --config CPL_ZIP_ENCODING CP437
# remove input files?
cleanup_input = True

# Send to stdout
[output_std]
class = stetl.outputs.standardoutput.StandardOutput
